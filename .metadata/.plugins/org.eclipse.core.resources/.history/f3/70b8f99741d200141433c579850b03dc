/**
 */
package org.emftrace.metamodel.ArchitectureKnowledgeModel.impl;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.emftrace.metamodel.ArchitectureKnowledgeModel.ASTARelation;
import org.emftrace.metamodel.ArchitectureKnowledgeModel.ArchitectureKnowledgeModelPackage;
import org.emftrace.metamodel.ArchitectureKnowledgeModel.Relations;
import org.emftrace.metamodel.ArchitectureKnowledgeModel.TechnologySolutionRelation;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Relations</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.emftrace.metamodel.ArchitectureKnowledgeModel.impl.RelationsImpl#getSolutionAndFeatureRelation <em>Solution And Feature Relation</em>}</li>
 *   <li>{@link org.emftrace.metamodel.ArchitectureKnowledgeModel.impl.RelationsImpl#getASTARelation <em>ASTA Relation</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class RelationsImpl extends ArchitectureKnowledgeModelBaseImpl implements Relations {
	/**
	 * The cached value of the '{@link #getSolutionAndFeatureRelation() <em>Solution And Feature Relation</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSolutionAndFeatureRelation()
	 * @generated
	 * @ordered
	 */
	protected EList<TechnologySolutionRelation> solutionAndFeatureRelation;

	/**
	 * The cached value of the '{@link #getASTARelation() <em>ASTA Relation</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getASTARelation()
	 * @generated
	 * @ordered
	 */
	protected EList<ASTARelation> astaRelation;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationsImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return ArchitectureKnowledgeModelPackage.Literals.RELATIONS;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<TechnologySolutionRelation> getSolutionAndFeatureRelation() {
		if (solutionAndFeatureRelation == null) {
			solutionAndFeatureRelation = new EObjectResolvingEList<TechnologySolutionRelation>(TechnologySolutionRelation.class, this, ArchitectureKnowledgeModelPackage.RELATIONS__SOLUTION_AND_FEATURE_RELATION);
		}
		return solutionAndFeatureRelation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<ASTARelation> getASTARelation() {
		if (astaRelation == null) {
			astaRelation = new EObjectResolvingEList<ASTARelation>(ASTARelation.class, this, ArchitectureKnowledgeModelPackage.RELATIONS__ASTA_RELATION);
		}
		return astaRelation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case ArchitectureKnowledgeModelPackage.RELATIONS__SOLUTION_AND_FEATURE_RELATION:
				return getSolutionAndFeatureRelation();
			case ArchitectureKnowledgeModelPackage.RELATIONS__ASTA_RELATION:
				return getASTARelation();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case ArchitectureKnowledgeModelPackage.RELATIONS__SOLUTION_AND_FEATURE_RELATION:
				getSolutionAndFeatureRelation().clear();
				getSolutionAndFeatureRelation().addAll((Collection<? extends TechnologySolutionRelation>)newValue);
				return;
			case ArchitectureKnowledgeModelPackage.RELATIONS__ASTA_RELATION:
				getASTARelation().clear();
				getASTARelation().addAll((Collection<? extends ASTARelation>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case ArchitectureKnowledgeModelPackage.RELATIONS__SOLUTION_AND_FEATURE_RELATION:
				getSolutionAndFeatureRelation().clear();
				return;
			case ArchitectureKnowledgeModelPackage.RELATIONS__ASTA_RELATION:
				getASTARelation().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case ArchitectureKnowledgeModelPackage.RELATIONS__SOLUTION_AND_FEATURE_RELATION:
				return solutionAndFeatureRelation != null && !solutionAndFeatureRelation.isEmpty();
			case ArchitectureKnowledgeModelPackage.RELATIONS__ASTA_RELATION:
				return astaRelation != null && !astaRelation.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //RelationsImpl
