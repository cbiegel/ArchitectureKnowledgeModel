package org.emftrace.akm.ui.zest.figures;

import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.MouseListener;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.swt.graphics.Color;
import org.emftrace.akm.ui.zest.figures.listeners.IExpandListener;
import org.emftrace.akm.ui.zest.nodes.AbstractAKMGraphNode;

/**
 * Abstract class for Figure elements that are used for {@link AbstractAKMGraphNode}s.
 * 
 * @author Christopher Biegel
 * 
 */
public abstract class AbstractAKMFigure extends Figure {

	// ===========================================================
	// Fields
	// ===========================================================

	/**
	 * The height of the whole Figure
	 */
	private int mHeight;

	/**
	 * The width of the whole Figure
	 */
	private int mWidth;

	// ===========================================================
	// Getter & Setter
	// ===========================================================

	/**
	 * @return The height of this figure
	 */
	public int getHeight() {
		return mHeight;
	}

	/**
	 * @return The width of this figure
	 */
	public int getWidth() {
		return mWidth;
	}

	// ===========================================================
	// Methods for/from SuperClass/Interfaces
	// ===========================================================

	@Override
	protected void paintFigure(final Graphics g) {
		super.paintFigure(g);
		Rectangle r = getClientArea();
		mHeight = r.height;
		mWidth = r.width;
	}

	@Override
	abstract public void addMouseListener(final MouseListener listener);
	
	@Override
	abstract public void removeMouseListener(final MouseListener listener);
	
	// ===========================================================
	// Methods
	// ===========================================================
	
	/**
	 * Highlight the figure after it was selected
	 */
	abstract public void highlight();

	/**
	 * Unhighlight the figure after it was deselected
	 */
	abstract public void unhighlight();

	/**
	 * Set the highlight color
	 * 
	 * @param pColor The Color used to highlight this figure
	 */
	abstract public void setHighlightColor(final Color pColor);

	/**
	 * @return True, if this figure is expanded. Otherwise, returns false.
	 */
	abstract public boolean isExpanded();

	/**
	 * Set the state of this figure to be expanded
	 */
	abstract public void setIsExpanded();

	/**
	 * Set the state of this figure to be collapsed
	 * 
	 * @param pApplyLayout If true, calls the applyLayout()-method of the super-class after setting the state to collapsed.
	 */
	abstract public void setIsCollapsed(final boolean pApplyLayout);

	/**
	 * Set the color of the figure's label
	 * 
	 * @param pColor The Color of the figure's label
	 */
	abstract public void setLabelColor(final Color pColor);

	/**
	 * Adds the specified {@link IExpandListener}
	 * 
	 * @param pExpandListener The IExpandListener to be added
	 */
	abstract public void addExpandListener(final IExpandListener pExpandListener);

	/**
	 * Removes the specified {@link IExpandListener}
	 * 
	 * @param pExpandListener The IExpandListener to be removed
	 */
	abstract public void removeExpandListener(final IExpandListener pExpandListener);
}
