package org.emftrace.akm.ui.zest.connections;

import org.eclipse.draw2d.ColorConstants;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecp.edit.spi.util.ECPModelElementChangeListener;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.DisposeEvent;
import org.eclipse.swt.events.DisposeListener;
import org.eclipse.swt.graphics.Font;
import org.eclipse.zest.core.widgets.GraphConnection;
import org.emftrace.metamodel.ArchitectureKnowledgeModel.ArchitectureKnowledgeModelBase;
import org.emftrace.metamodel.QUARCModel.GSS.Decomposition;
import org.emftrace.metamodel.QUARCModel.GSS.Impact;
import org.emftrace.metamodel.QUARCModel.GSS.Offset;
import org.emftrace.metamodel.QUARCModel.Query.Rating;
import org.emftrace.quarc.ui.helpers.DefaultColors;

public class ConnectionDecoratorService {

	// ===========================================================
	// Constants
	// ===========================================================

	// Constants for various font sizes
	private static final Font DECORATION_FONT_TINY = new Font(null, "Arial", 6, SWT.NONE);
	private static final Font DECORATION_FONT_SMALL = new Font(null, "Arial", 8, SWT.NONE);
	private static final Font DECORATION_FONT_NORMAL = new Font(null, "Arial", 10, SWT.BOLD);
	private static final Font DECORATION_FONT_LARGE = new Font(null, "Arial", 12, SWT.BOLD);

	// ===========================================================
	// Methods
	// ===========================================================

	/**
	 * Decorates the specified GraphConnection in style of URN and adds a tooltip for the AKM
	 * elements
	 * 
	 * @param pConnection
	 *            the GraphConnection to decorate
	 * @param source
	 *            the source Element of the Relation
	 * @param target
	 *            the target Element of the Relation
	 * @param weight
	 *            the weight of the Relation
	 */
	public static void decoradeConnection(final GraphConnection pConnection,
			final ArchitectureKnowledgeModelBase pSourceElement,
			final ArchitectureKnowledgeModelBase pTargetElement, final String weight) {

		float fWeight = weight != null ? Float.valueOf(weight) : 0;

		pConnection.setLineColor(ColorConstants.black);

		pConnection.setLineWidth(1);

		if (weight != null) {
			pConnection.setLineColor(DefaultColors.getConnectionColor(fWeight));
		}

		if (relation instanceof Offset) {
			pConnection.setLineStyle(SWT.LINE_DASH);
		}

		decorateWithWeight(pConnection, weight);

		pConnection.setTooltip(createTooltipFigure(pConnection, relation, source, target, weight));
		if (relation instanceof Decomposition) {
			drawDecompositionConnectionEnd(pConnection);

		} else if ((relation instanceof Impact) || (relation instanceof Offset)) {

			if (fWeight < -75.0f) {
				decorateWithBrakeFigure(pConnection);
			} else if (fWeight < -25.0f) {
				decorateWithSomeNegativeFigure(pConnection);
			} else if (fWeight < -0.0f) {
				decorateWithHurtsFigure(pConnection);
			} else if (fWeight == 0.0f) {
				decorateWithUnknownFigure(pConnection);
			} else if (fWeight <= 25.0f) {
				decorateWithHelpsFigure(pConnection);
			} else if (fWeight <= 75.0f) {
				decorateWithSomePositiveFigure(pConnection);
			} else {
				decorateWithMakeFigure(pConnection);
			}

		}

		final ECPModelElementChangeListener ecpModelElementChangeListener =
				new ECPModelElementChangeListener(relation) {

					@Override
					public void onChange(final Notification notification) {
						if (relation instanceof Impact) {
							decoradeConnection(pConnection, relation, relation.getSource(),
									relation.getTarget(), ((Impact) relation).getWeight());
						} else if (relation instanceof Offset) {
							decoradeConnection(pConnection, relation, relation.getSource(),
									relation.getTarget(), ((Offset) relation).getValue());
						} else if (relation instanceof Rating) {
							decoradeConnection(pConnection, relation, relation.getSource(),
									relation.getTarget(), ((Rating) relation).getWeight());
						} else {
							decoradeConnection(pConnection, relation, relation.getSource(),
									relation.getTarget(), "");
						}

					}
				};

		relation.addModelElementChangeListener(ecpModelElementChangeListener);

		pConnection.addDisposeListener(new DisposeListener() {

			@Override
			public void widgetDisposed(final DisposeEvent e) {
				relation.removeModelElementChangeListener(ecpModelElementChangeListener);

			}
		});
	}

	// ===========================================================
	// Inner and Anonymous Classes
	// ===========================================================
}
