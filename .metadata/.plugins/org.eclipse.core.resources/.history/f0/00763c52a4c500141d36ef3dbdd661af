package org.emftrace.akm.ui.zest.graph;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.zest.core.widgets.Graph;
import org.eclipse.zest.core.widgets.GraphItem;
import org.emftrace.akm.ui.zest.nodes.AKMElementGraphNode;
import org.emftrace.quarc.ui.zest.nodes.GSSElementGraphNode;


/**
 * 
 * @author Christopher Biegel
 *
 */
public class AKMGraph extends Graph {

	public AKMGraph(final Composite pParent, final int pStyle) {
		super(pParent, pStyle);

		this.addMouseListener(new org.eclipse.swt.events.MouseAdapter() {

			@Override
			public void mouseDown(final MouseEvent pEvent) {
				if ((pEvent.button == 1) && (getFigureAt(pEvent.x, pEvent.y) == null)) {

					//if a mouse click was performed on an empty space (no nodes were selected), deselect all previously selected nodes.
					deselectAllNodes();
					System.out.println("DESELECT ALL NODES");
				}
			}
		});
	}


	/**
	 * Selects the specified node.
	 * @param node the AKMElementGraphNode to select
	 * @param replaceSelection should selection be replaced?
	 */
	public void selectNode(final GSSElementGraphNode node, final boolean replaceSelection) {
		if (!replaceSelection) {
			GraphItem[] selectedItems = new GraphItem[this.getSelection().size()+1];
			int i = 0;
			for (Object selectedObject : this.getSelection()){
				selectedItems[i] = (GraphItem)selectedObject;
				i++;
			}
			selectedItems[i] = node;
			this.setSelection(selectedItems);
		}
		else {
			GraphItem[] selectedItems = { node };
			this.setSelection(selectedItems);
		}

		Event event = new Event();
		event.widget = node;
		this.notifyListeners(SWT.Selection, event);
		node.notifySelectionListeners();

	}

	/**
	 * Deselects all currently selected nodes in the graph.
	 */
	public void deselectAllNodes() {
		List<Object> selectedNodes = new ArrayList<Object>(); //due to concurrent access to the selected nodes, the list must be duplicated
		selectedNodes.addAll(this.getSelection());			  //otherwise an expection will be raised
		for (Object selectedNode : selectedNodes ){
			if (selectedNode instanceof AKMElementGraphNode )
				deselectNode((AKMElementGraphNode) selectedNode, false);
		}
	}

	/**
	 * Deselects a specific node in the graph.
	 * @param pNode the AKMElementGraphNode to deselect
	 * @param pClearCompleteSelection If true, all nodes will be deselected. Otherwise, will only deselect the given {@link pNode}.
	 */
	public void deselectNode(final AKMElementGraphNode pNode, final boolean pClearCompleteSelection) {
		if (!pClearCompleteSelection) {
			GraphItem[] selectedItems = new GraphItem[this.getSelection().size()-1];
			int i = 0;
			for (Object selectedObject : this.getSelection()){
				if (pNode != selectedObject){
					selectedItems[i] = (GraphItem)selectedObject;
					i++;
				}
			}
			this.setSelection(selectedItems);
		}
		else {
			GraphItem[] selectedItems = { };
			this.setSelection(selectedItems);
		}
		Event event = new Event();
		event.widget = pNode;
		this.notifyListeners(SWT.Selection, event);
		pNode.notifySelectionListeners();
	}
}